#!/usr/bin/python

import argparse
import os
import pwd
import sys

from mcserver import MinecraftServerManager, TmuxCommandError, TmuxInterface, Util


class StartServerApplication(object):
    SUPERUSER_UID = 0

    RC_SUCCESS = 0
    RC_RUNNING_AS_ROOT = 10
    RC_SERVER_START_ERROR = 11
    RC_SERVER_STOP_ERROR = 12

    def __init__(self):
        self.arg_parser = argparse.ArgumentParser()
        self.config_argparse()

    def config_argparse(self):
        p = self.arg_parser
        modes = ['start', 'stop', 'save-on', 'save-off', 'save-all']
        p.add_argument(
            '--config', '-c', dest='config', default='/etc/mcservermanager.conf',
            help='The MinecraftServerManager config to read.'
        )
        p.add_argument(
            '--server', '-s', dest='server', default=None,
            help='The server configuration section to use from the read config file.'
        )
        p.add_argument(
            'mode', metavar='mode', choices=modes,
            help='''One of: "start" to start the server, "stop" to stop it,
            "save-on" to enable world saving, "save-off" to disable world
            saving, or "save-all" to force a world save'''
        )

    # TODO: Move this into the MinecraftServerManager server start logic?
    def drop_privileges(self, mc_user):
        e = None
        try:
            mc_user_uid, _, _, mc_user_home, *_ = pwd.getpwnam(mc_user)[2:7]
            os.setuid(mc_user_uid)
            os.environ['HOME'] = mc_user_home
        except KeyError:
            raise UserSwitchError(
                'User "{}" does not seem to exist'.format(mc_user)
            )
        except TypeError:
            # No user specified
            pass
        except PermissionError:
            e = UserSwitchError("Can't switch users - not root!")

        if os.geteuid() == self.SUPERUSER_UID:
            raise ReallyStupidIdeaError(
                'Running Minecraft as root is a really, really bad idea.'
            )
        elif e is not None:
            raise e

    def run(self, argv):
        args = self.arg_parser.parse_args(argv)
        mc_server_manager = Util.load_config(args.config, args.server)
        try:
            self.drop_privileges(mc_server_manager.user)
        except UserSwitchError as e:
            print('WARNING: User switch failed - {}'.format(e), file=sys.stderr)
        except ReallyStupidIdeaError as e:
            print('FATAL: {}'.format(e), file=sys.stderr)
            return self.RC_RUNNING_AS_ROOT
        mode_calls = {
            'start':     mc_server_manager.start,
            'stop':      mc_server_manager.stop,
            'save-on':   mc_server_manager.save_on,
            'save-off':  mc_server_manager.save_off,
            'save-all':  mc_server_manager.force_save
        }
        try:
            mode_calls[args.mode]()
        except KeyError:
            # argparse should not allow this to happen
            pass
        except ServerStartError:
            return self.RC_SERVER_START_ERROR
        except ServerStopError:
            return self.RC_SERVER_STOP_ERROR

class UserSwitchError(Exception): pass
class ReallyStupidIdeaError(Exception): pass
class ServerStartError(Exception): pass
class ServerStopError(Exception): pass

if __name__ == '__main__':
    exit(StartServerApplication().run(sys.argv[1:]))
